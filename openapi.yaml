openapi: 3.0.0
info:
  title: Simple REST API Ecomeerce
  version: 1.0.0
  description: An ecommerce rest API
servers:
  - url: http://localhost:3000
paths:
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update a product name by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductNameInput'
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
    delete:
      summary: Remove a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users:
    post:
      summary: Add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
  /users/id:
    put:
      summary: Update a user's username by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameInput'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
    delete:
      summary: Remove a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
  /users/address/{id}:
    get:
      summary: Get an address by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Address ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Address not found
  /users/address:
    post:
      summary: Add a new address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
      responses:
        '201':
          description: Address created successfully
  /users/address/id:
    put:
      summary: Update an address by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
      responses:
        '200':
          description: Address updated successfully
        '404':
          description: Address not found
    delete:
      summary: Remove an address by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Address ID
      responses:
        '200':
          description: Address deleted successfully
        '404':
          description: Address not found
  /users/cart/{id}:
    get:
      summary: Get a cart by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found
  /users/cart/item/{id}:
    get:
      summary: Get a cart item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart Item ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '404':
          description: Cart item not found
  /users/cart:
    post:
      summary: Add a new cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '201':
          description: Cart created successfully
  /users/cart/item:
    post:
      summary: Add a new cart item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '201':
          description: Cart item added successfully
  /users/cart/item/id:
    put:
      summary: Update a cart item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart Item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '200':
          description: Cart item updated successfully
        '404':
          description: Cart item not found
    delete:
      summary: Remove a cart item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart Item ID
      responses:
        '200':
          description: Cart item deleted successfully
        '404':
          description: Cart item not found
  /users/orders/{id}:
    get:
      summary: Get an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
  /users/orders:
    post:
      summary: Add a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully
  /users/orders/id:
    delete:
      summary: Remove an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Order ID
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        quantity:
          type: integer
    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        quantity:
          type: integer
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        name:
          type: string
    UserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        name:
          type: string
    UsernameInput:
      type: object
      properties:
        username:
          type: string
    Address:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postal_code:
          type: string
    AddressInput:
      type: object
      properties:
        user_id:
          type: integer
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postal_code:
          type: string
    Cart:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
    CartInput:
      type: object
      properties:
        user_id:
          type: integer
    CartItem:
      type: object
      properties:
        id:
          type: integer
        cart_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
    CartItemInput:
      type: object
      properties:
        cart_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        status:
          type: string
    OrderInput:
      type: object
      properties:
        user_id:
          type: integer
        status:
          type: string
